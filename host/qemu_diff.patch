diff --git a/configure b/configure
index 283c71c..d3b443e 100755
--- a/configure
+++ b/configure
@@ -2193,14 +2193,14 @@ fi
 
 ##########################################
 # RDMA needs OpenFabrics libraries
-if test "$rdma" != "no" ; then
+#if test "$rdma" != "no" ; then
   cat > $TMPC <<EOF
 #include <rdma/rdma_cma.h>
 int main(void) { return 0; }
 EOF
   rdma_libs="-lrdmacm -libverbs"
   if compile_prog "" "$rdma_libs" ; then
-    rdma="yes"
+    #rdma="yes"
     libs_softmmu="$libs_softmmu $rdma_libs"
   else
     if test "$rdma" = "yes" ; then
@@ -2213,7 +2213,7 @@ EOF
     fi
     rdma="no"
   fi
-fi
+#fi
 
 ##########################################
 # VNC TLS/WS detection
diff --git a/hw/virtio/Makefile.objs b/hw/virtio/Makefile.objs
index ec9e855..0690edc 100644
--- a/hw/virtio/Makefile.objs
+++ b/hw/virtio/Makefile.objs
@@ -2,6 +2,8 @@ common-obj-y += virtio-rng.o
 common-obj-$(CONFIG_VIRTIO_PCI) += virtio-pci.o
 common-obj-y += virtio-bus.o
 common-obj-y += virtio-mmio.o
+common-obj-y += virtio-hyv.o
+common-obj-y += virtio-rdmacm.o
 common-obj-$(CONFIG_VIRTIO_BLK_DATA_PLANE) += dataplane/
 
 obj-y += virtio.o virtio-balloon.o 
diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index 3007319..8afd59c 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -1529,6 +1529,110 @@ static const TypeInfo virtio_rng_pci_info = {
     .class_init    = virtio_rng_pci_class_init,
 };
 
+/* virtio-hyv-pci */
+
+static Property virtio_hyv_properties[] = {
+    DEFINE_PROP_BIT("ioeventfd", VirtIOPCIProxy, flags,
+                    VIRTIO_PCI_FLAG_USE_IOEVENTFD_BIT, false),
+    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 3),
+    DEFINE_PROP_STRING("config_path", VirtIOHyvPCI, vdev.config_path),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static int virtio_hyv_pci_init(VirtIOPCIProxy *vpci_dev)
+{
+    VirtIOHyvPCI *dev = VIRTIO_HYV_PCI(vpci_dev);
+    DeviceState *vdev = DEVICE(&dev->vdev);
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    if (qdev_init(vdev) < 0) {
+        return -1;
+    }
+    return 0;
+}
+
+static void virtio_hyv_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);
+    VirtioPCIClass *vpciklass = VIRTIO_PCI_CLASS(klass);
+
+    k->romfile = "efi-virtio.rom";
+    k->vendor_id = PCI_VENDOR_ID_REDHAT_QUMRANET;
+    k->device_id = PCI_DEVICE_ID_VIRTIO_HYV;
+    k->revision = VIRTIO_PCI_ABI_VERSION;
+    k->class_id = PCI_CLASS_NETWORK_ETHERNET;
+    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
+    dc->props = virtio_hyv_properties;
+    vpciklass->init = virtio_hyv_pci_init;
+}
+
+static void virtio_hyv_pci_instance_init(Object *obj)
+{
+    VirtIOHyvPCI *dev = VIRTIO_HYV_PCI(obj);
+    object_initialize(&dev->vdev, sizeof(dev->vdev), TYPE_VIRTIO_HYV);
+    object_property_add_child(obj, "virtio-backend", OBJECT(&dev->vdev), NULL);
+}
+
+static const TypeInfo virtio_hyv_pci_info = {
+    .name          = TYPE_VIRTIO_HYV_PCI,
+    .parent        = TYPE_VIRTIO_PCI,
+    .instance_size = sizeof(VirtIONetPCI),
+    .instance_init = virtio_hyv_pci_instance_init,
+    .class_init    = virtio_hyv_pci_class_init,
+};
+
+/* virtio-pci-rdmacm */
+
+static Property virtio_rdmacm_pci_properties[] = {
+	  DEFINE_PROP_BIT("ioeventfd", VirtIOPCIProxy, flags,
+						VIRTIO_PCI_FLAG_USE_IOEVENTFD_BIT, false),
+    DEFINE_PROP_UINT32("vectors", VirtIOPCIProxy, nvectors, 3),
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static int virtio_rdmacm_pci_init(VirtIOPCIProxy *vpci_dev)
+{
+    VirtIORdmaCMPCI *dev = VIRTIO_RDMACM_PCI(vpci_dev);
+    DeviceState *vdev = DEVICE(&dev->vdev);
+
+    qdev_set_parent_bus(vdev, BUS(&vpci_dev->bus));
+    if (qdev_init(vdev) < 0) {
+        return -1;
+    }
+    return 0;
+}
+
+static void virtio_rdmacm_pci_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioPCIClass *k = VIRTIO_PCI_CLASS(klass);
+    PCIDeviceClass *pcidev_k = PCI_DEVICE_CLASS(klass);
+    k->init = virtio_rdmacm_pci_init;
+    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
+    dc->props = virtio_rdmacm_pci_properties;
+    pcidev_k->vendor_id = PCI_VENDOR_ID_REDHAT_QUMRANET;
+    pcidev_k->device_id = PCI_DEVICE_ID_VIRTIO_RDMACM;
+    pcidev_k->revision = VIRTIO_PCI_ABI_VERSION;
+    pcidev_k->class_id = PCI_CLASS_COMMUNICATION_OTHER;
+}
+
+static void virtio_rdmacm_pci_instance_init(Object *obj)
+{
+	VirtIORdmaCMPCI *dev = VIRTIO_RDMACM_PCI(obj);
+    object_initialize(&dev->vdev, sizeof(dev->vdev), TYPE_VIRTIO_RDMACM);
+    object_property_add_child(obj, "virtio-backend", OBJECT(&dev->vdev), NULL);
+
+}
+
+static const TypeInfo virtio_rdmacm_pci_info = {
+    .name          = TYPE_VIRTIO_RDMACM_PCI,
+    .parent        = TYPE_VIRTIO_PCI,
+    .instance_size = sizeof(VirtIORdmaCMPCI),
+    .instance_init = virtio_rdmacm_pci_instance_init,
+    .class_init    = virtio_rdmacm_pci_class_init,
+};
+
 /* virtio-pci-bus */
 
 static void virtio_pci_bus_new(VirtioBusState *bus, size_t bus_size,
@@ -1586,6 +1690,8 @@ static void virtio_pci_register_types(void)
 #ifdef CONFIG_VHOST_SCSI
     type_register_static(&vhost_scsi_pci_info);
 #endif
+    type_register_static(&virtio_hyv_pci_info);
+    type_register_static(&virtio_rdmacm_pci_info);
 }
 
 type_init(virtio_pci_register_types)
diff --git a/hw/virtio/virtio-pci.h b/hw/virtio/virtio-pci.h
index 1cea157..f6cc38b 100644
--- a/hw/virtio/virtio-pci.h
+++ b/hw/virtio/virtio-pci.h
@@ -30,6 +30,8 @@
 #ifdef CONFIG_VHOST_SCSI
 #include "hw/virtio/vhost-scsi.h"
 #endif
+#include "hw/virtio/virtio-hyv.h"
+#include "hw/virtio/virtio-rdmacm.h"
 
 typedef struct VirtIOPCIProxy VirtIOPCIProxy;
 typedef struct VirtIOBlkPCI VirtIOBlkPCI;
@@ -39,6 +41,8 @@ typedef struct VirtIOSerialPCI VirtIOSerialPCI;
 typedef struct VirtIONetPCI VirtIONetPCI;
 typedef struct VHostSCSIPCI VHostSCSIPCI;
 typedef struct VirtIORngPCI VirtIORngPCI;
+typedef struct VirtIOHyvPCI VirtIOHyvPCI;
+typedef struct VirtIORdmaCMPCI VirtIORdmaCMPCI;
 
 /* virtio-pci-bus */
 
@@ -198,6 +202,30 @@ struct VirtIORngPCI {
     VirtIORNG vdev;
 };
 
+/*
+ * virtio-hyv-pci: This extends VirtioPCIProxy.
+ */
+#define TYPE_VIRTIO_HYV_PCI "virtio-hyv-pci"
+#define VIRTIO_HYV_PCI(obj) \
+        OBJECT_CHECK(VirtIOHyvPCI, (obj), TYPE_VIRTIO_HYV_PCI)
+
+struct VirtIOHyvPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIOHyv vdev;
+};
+
+/*
+ * virtio-rdmacm-pci
+ */
+#define TYPE_VIRTIO_RDMACM_PCI "virtio-rdmacm-pci"
+#define VIRTIO_RDMACM_PCI(obj) \
+        OBJECT_CHECK(VirtIORdmaCMPCI, (obj), TYPE_VIRTIO_RDMACM_PCI)
+
+struct VirtIORdmaCMPCI {
+    VirtIOPCIProxy parent_obj;
+    VirtIORdmaCM vdev;
+};
+
 /* Virtio ABI version, if we increment this, we break the guest driver. */
 #define VIRTIO_PCI_ABI_VERSION          0
 
diff --git a/hw/virtio/virtio-rdmacm.c b/hw/virtio/virtio-rdmacm.c
new file mode 100644
index 0000000..581e7a7
--- /dev/null
+++ b/hw/virtio/virtio-rdmacm.c
@@ -0,0 +1,267 @@
+/*
+ * Hybrid Virtualization (HyV) for Linux
+ *
+ * Author: Jonas Pfefferle <jpf@zurich.ibm.com>
+ *
+ * Copyright (c) 2015, IBM Corporation
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * BSD license below:
+ *
+ *   Redistribution and use in source and binary forms, with or
+ *   without modification, are permitted provided that the following
+ *   conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of IBM nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#include "qemu/iov.h"
+#include "qemu/timer.h"
+#include "qemu-common.h"
+#include "hw/virtio/virtio.h"
+#include "hw/i386/pc.h"
+#include "hw/virtio/virtio-rdmacm.h"
+#include "sysemu/kvm.h"
+#include "exec/address-spaces.h"
+#include "qapi/visitor.h"
+#include "qemu/error-report.h"
+
+#include "hw/virtio/virtio-bus.h"
+
+static void virtio_rdmacm_get_config(VirtIODevice *vdev, uint8_t *config_data)
+{
+    VirtIORdmaCM *dev = VIRTIO_RDMACM(vdev);
+
+    printf("%s\n", __FUNCTION__);
+
+    memcpy(config_data, &dev->config, sizeof(VirtIORdmaCMConfig));
+}
+
+static void virtio_rdmacm_set_config(VirtIODevice *vdev,
+                                      const uint8_t *config_data)
+{
+    VirtIORdmaCM *dev = VIRTIO_RDMACM(vdev);
+
+    printf("%s\n", __FUNCTION__);
+
+    memcpy(&dev->config, config_data, sizeof(VirtIORdmaCMConfig));
+
+}
+
+static uint32_t virtio_rdmacm_get_features(VirtIODevice *vdev, uint32_t f)
+{
+    return f;
+}
+
+static void virtio_rdmacm_save(QEMUFile *f, void *opaque)
+{
+    VirtIORdmaCM *s = VIRTIO_RDMACM(opaque);
+    VirtIODevice *vdev = VIRTIO_DEVICE(s);
+
+    virtio_save(vdev, f);
+}
+
+static int virtio_rdmacm_load(QEMUFile *f, void *opaque, int version_id)
+{
+    VirtIORdmaCM *s = VIRTIO_RDMACM(opaque);
+    VirtIODevice *vdev = VIRTIO_DEVICE(s);
+    int ret;
+
+    ret = virtio_load(vdev, f, version_id);
+    if (ret) {
+        return ret;
+    }
+
+    return 0;
+}
+
+static int vhost_rdmacm_start(VirtIORdmaCM *s)
+{
+	VirtIODevice *vdev = VIRTIO_DEVICE(s);
+	BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(vdev)));
+	VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(qbus);
+	int ret;
+	int i;
+
+	ret = vhost_dev_enable_notifiers(&s->dev, vdev);
+	if (ret < 0) {
+		return ret;
+	}
+
+	s->dev.acked_features = vdev->guest_features;
+	ret = vhost_dev_start(&s->dev, vdev);
+	if (ret < 0) {
+		printf("Error start vhost dev\n");
+		goto err_notifiers;
+	}
+
+	ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, true);
+	if (ret < 0) {
+		printf("Error binding guest notifier\n");
+		goto err_vhost_stop;
+	}
+
+	for (i = 0; i < s->dev.nvqs; i++) {
+		vhost_virtqueue_mask(&s->dev, vdev, i, false);
+	}
+
+	return 0;
+
+err_vhost_stop:
+	vhost_dev_stop(&s->dev, vdev);
+err_notifiers:
+	vhost_dev_disable_notifiers(&s->dev, vdev);
+	return ret;
+}
+
+static void vhost_rdmacm_stop(VirtIORdmaCM *s)
+{
+	VirtIODevice *vdev = VIRTIO_DEVICE(s);
+	BusState *qbus = BUS(qdev_get_parent_bus(DEVICE(vdev)));
+	VirtioBusClass *k = VIRTIO_BUS_GET_CLASS(qbus);
+	int ret;
+
+	ret = k->set_guest_notifiers(qbus->parent, s->dev.nvqs, false);
+	if (ret < 0) {
+		error_report("Error release guest notifier");
+	}
+	vhost_dev_stop(&s->dev, vdev);
+	vhost_dev_disable_notifiers(&s->dev, vdev);
+}
+
+static void virtio_rdmacm_set_status(VirtIODevice *vdev, uint8_t val)
+{
+	VirtIORdmaCM *s = VIRTIO_RDMACM(vdev);
+	bool start = (val & VIRTIO_CONFIG_S_DRIVER_OK);
+
+	if (s->dev.started == start) {
+		return;
+	}
+
+	printf("%s - ", __FUNCTION__);
+
+	if (start) {
+		int ret;
+		printf("start\n");
+
+		ret = vhost_rdmacm_start(s);
+		if (ret < 0) {
+			error_report("virtio-rdmacm: unable to start vhost: %s\n",
+						 strerror(-ret));
+			exit(1);
+		}
+	} else {
+		printf("stop\n");
+		vhost_rdmacm_stop(s);
+	}
+
+}
+
+static void virtio_rdmacm_handle_q(VirtIODevice *vdev, VirtQueue *vq)
+{
+	printf("%s\n", __FUNCTION__);
+}
+
+static void virtio_rdmacm_device_realize(DeviceState *dev, Error **errp)
+{
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+    VirtIORdmaCM *s = VIRTIO_RDMACM(vdev);
+    int ret, vhostfd;
+
+    printf("%s\n", __FUNCTION__);
+
+    virtio_init(vdev, "virtio-rdmacm", VIRTIO_ID_RDMACM,
+    		sizeof(VirtIORdmaCMConfig));
+
+    register_savevm(dev, "virtio-rdmacm", -1, 1,
+                    virtio_rdmacm_save, virtio_rdmacm_load, s);
+
+    s->q = virtio_add_queue(vdev, 256,
+						   	   virtio_rdmacm_handle_q);
+
+
+    s->dev.nvqs = 1;
+    s->dev.vqs = g_new(struct vhost_virtqueue, s->dev.nvqs);
+	s->dev.vq_index = 0;
+
+	vhostfd = open("/dev/vhost-rdmacm", O_RDWR);
+	if (vhostfd < 0) {
+		error_setg(errp, "vhost-rdmacm: open vhost char device failed: %s",
+				   strerror(errno));
+		return;
+	}
+
+	ret = vhost_dev_init(&s->dev, (void *)(uintptr_t)vhostfd,
+					VHOST_BACKEND_TYPE_KERNEL, true);
+	if (ret < 0) {
+		error_setg(errp, "vhost-hyv: vhost initialization failed: %s\n",
+				strerror(-ret));
+		virtio_cleanup(vdev);
+		return;
+	}
+	s->dev.backend_features = 0;
+}
+
+static void virtio_rdmacm_device_unrealize(DeviceState *dev, Error **errp)
+{
+    VirtIORdmaCM *s = VIRTIO_RDMACM(dev);
+    VirtIODevice *vdev = VIRTIO_DEVICE(dev);
+
+    virtio_rdmacm_set_status(vdev, 0);
+
+    unregister_savevm(dev, "virtio-rdmacm", s);
+    virtio_cleanup(vdev);
+}
+
+static Property virtio_rdmacm_properties[] = {
+    DEFINE_PROP_END_OF_LIST(),
+};
+
+static void virtio_rdmacm_class_init(ObjectClass *klass, void *data)
+{
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    VirtioDeviceClass *vdc = VIRTIO_DEVICE_CLASS(klass);
+    dc->props = virtio_rdmacm_properties;
+    set_bit(DEVICE_CATEGORY_NETWORK, dc->categories);
+    vdc->realize = virtio_rdmacm_device_realize;
+    vdc->unrealize = virtio_rdmacm_device_unrealize;
+    vdc->get_config = virtio_rdmacm_get_config;
+    vdc->set_config = virtio_rdmacm_set_config;
+    vdc->set_status = virtio_rdmacm_set_status;
+    vdc->get_features = virtio_rdmacm_get_features;
+}
+
+static const TypeInfo virtio_rdmacm_info = {
+    .name = TYPE_VIRTIO_RDMACM,
+    .parent = TYPE_VIRTIO_DEVICE,
+    .instance_size = sizeof(VirtIORdmaCM),
+    .class_init = virtio_rdmacm_class_init,
+};
+
+static void virtio_register_types(void)
+{
+    type_register_static(&virtio_rdmacm_info);
+}
+
+type_init(virtio_register_types)
diff --git a/include/hw/pci/pci.h b/include/hw/pci/pci.h
index c352c7b..82374a9 100644
--- a/include/hw/pci/pci.h
+++ b/include/hw/pci/pci.h
@@ -81,6 +81,8 @@
 #define PCI_DEVICE_ID_VIRTIO_SCSI        0x1004
 #define PCI_DEVICE_ID_VIRTIO_RNG         0x1005
 #define PCI_DEVICE_ID_VIRTIO_9P          0x1009
+#define PCI_DEVICE_ID_VIRTIO_RDMACM      0x100d
+#define PCI_DEVICE_ID_VIRTIO_HYV	 0x100e
 
 #define PCI_VENDOR_ID_REDHAT             0x1b36
 #define PCI_DEVICE_ID_REDHAT_BRIDGE      0x0001
diff --git a/include/hw/virtio/vhost-scsi.h b/include/hw/virtio/vhost-scsi.h
index 85cc031..56a050c 100644
--- a/include/hw/virtio/vhost-scsi.h
+++ b/include/hw/virtio/vhost-scsi.h
@@ -32,6 +32,7 @@
 
 /* TODO #include <linux/vhost.h> properly */
 /* For VHOST_SCSI_SET_ENDPOINT/VHOST_SCSI_CLEAR_ENDPOINT ioctl */
+
 struct vhost_scsi_target {
     int abi_version;
     char vhost_wwpn[224];
diff --git a/include/hw/virtio/virtio-rdmacm.h b/include/hw/virtio/virtio-rdmacm.h
new file mode 100644
index 0000000..e4a7e1b
--- /dev/null
+++ b/include/hw/virtio/virtio-rdmacm.h
@@ -0,0 +1,59 @@
+/*
+ * Hybrid Virtualization (HyV) for Linux
+ *
+ * Author: Jonas Pfefferle <jpf@zurich.ibm.com>
+ *
+ * Copyright (c) 2015, IBM Corporation
+ *
+ * This software is available to you under a choice of one of two
+ * licenses.  You may choose to be licensed under the terms of the GNU
+ * General Public License (GPL) Version 2, available from the file
+ * COPYING in the main directory of this source tree, or the
+ * BSD license below:
+ *
+ *   Redistribution and use in source and binary forms, with or
+ *   without modification, are permitted provided that the following
+ *   conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of IBM nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+ * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
+ * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
+ * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+#ifndef _QEMU_VIRTIO_RDMA_CM_H
+#define _QEMU_VIRTIO_RDMA_CM_H
+
+#include "hw/virtio/virtio.h"
+#include "hw/virtio/vhost.h"
+#include "hw/pci/pci.h"
+
+#define TYPE_VIRTIO_RDMACM "virtio-rdmacm-device"
+#define VIRTIO_RDMACM(obj) \
+        OBJECT_CHECK(VirtIORdmaCM, (obj), TYPE_VIRTIO_RDMACM)
+
+#include <virtio_rdmacm_config.h>
+
+typedef struct VirtIORdmaCM {
+    VirtIODevice parent_obj;
+    struct vhost_dev dev;
+    VirtIORdmaCMConfig config;
+    VirtQueue *q;
+} VirtIORdmaCM;
+
+#endif
